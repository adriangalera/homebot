// Code generated by mockery v2.20.0. DO NOT EDIT.

package bot

import (
	command "homebot/internal/command"

	mock "github.com/stretchr/testify/mock"
)

// MockHomeBot is an autogenerated mock type for the HomeBot type
type MockHomeBot struct {
	mock.Mock
}

type MockHomeBot_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHomeBot) EXPECT() *MockHomeBot_Expecter {
	return &MockHomeBot_Expecter{mock: &_m.Mock}
}

// HandleCommand provides a mock function with given fields: _a0
func (_m *MockHomeBot) HandleCommand(_a0 command.Command) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(command.Command) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHomeBot_HandleCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleCommand'
type MockHomeBot_HandleCommand_Call struct {
	*mock.Call
}

// HandleCommand is a helper method to define mock.On call
//   - _a0 command.Command
func (_e *MockHomeBot_Expecter) HandleCommand(_a0 interface{}) *MockHomeBot_HandleCommand_Call {
	return &MockHomeBot_HandleCommand_Call{Call: _e.mock.On("HandleCommand", _a0)}
}

func (_c *MockHomeBot_HandleCommand_Call) Run(run func(_a0 command.Command)) *MockHomeBot_HandleCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(command.Command))
	})
	return _c
}

func (_c *MockHomeBot_HandleCommand_Call) Return(_a0 error) *MockHomeBot_HandleCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHomeBot_HandleCommand_Call) RunAndReturn(run func(command.Command) error) *MockHomeBot_HandleCommand_Call {
	_c.Call.Return(run)
	return _c
}

// ListenForCommands provides a mock function with given fields:
func (_m *MockHomeBot) ListenForCommands() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHomeBot_ListenForCommands_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListenForCommands'
type MockHomeBot_ListenForCommands_Call struct {
	*mock.Call
}

// ListenForCommands is a helper method to define mock.On call
func (_e *MockHomeBot_Expecter) ListenForCommands() *MockHomeBot_ListenForCommands_Call {
	return &MockHomeBot_ListenForCommands_Call{Call: _e.mock.On("ListenForCommands")}
}

func (_c *MockHomeBot_ListenForCommands_Call) Run(run func()) *MockHomeBot_ListenForCommands_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHomeBot_ListenForCommands_Call) Return(_a0 error) *MockHomeBot_ListenForCommands_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHomeBot_ListenForCommands_Call) RunAndReturn(run func() error) *MockHomeBot_ListenForCommands_Call {
	_c.Call.Return(run)
	return _c
}

// SendAudio provides a mock function with given fields: filename
func (_m *MockHomeBot) SendAudio(filename string) error {
	ret := _m.Called(filename)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHomeBot_SendAudio_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAudio'
type MockHomeBot_SendAudio_Call struct {
	*mock.Call
}

// SendAudio is a helper method to define mock.On call
//   - filename string
func (_e *MockHomeBot_Expecter) SendAudio(filename interface{}) *MockHomeBot_SendAudio_Call {
	return &MockHomeBot_SendAudio_Call{Call: _e.mock.On("SendAudio", filename)}
}

func (_c *MockHomeBot_SendAudio_Call) Run(run func(filename string)) *MockHomeBot_SendAudio_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHomeBot_SendAudio_Call) Return(_a0 error) *MockHomeBot_SendAudio_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHomeBot_SendAudio_Call) RunAndReturn(run func(string) error) *MockHomeBot_SendAudio_Call {
	_c.Call.Return(run)
	return _c
}

// SendImage provides a mock function with given fields: filename
func (_m *MockHomeBot) SendImage(filename string) error {
	ret := _m.Called(filename)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHomeBot_SendImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendImage'
type MockHomeBot_SendImage_Call struct {
	*mock.Call
}

// SendImage is a helper method to define mock.On call
//   - filename string
func (_e *MockHomeBot_Expecter) SendImage(filename interface{}) *MockHomeBot_SendImage_Call {
	return &MockHomeBot_SendImage_Call{Call: _e.mock.On("SendImage", filename)}
}

func (_c *MockHomeBot_SendImage_Call) Run(run func(filename string)) *MockHomeBot_SendImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHomeBot_SendImage_Call) Return(_a0 error) *MockHomeBot_SendImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHomeBot_SendImage_Call) RunAndReturn(run func(string) error) *MockHomeBot_SendImage_Call {
	_c.Call.Return(run)
	return _c
}

// SendText provides a mock function with given fields: message
func (_m *MockHomeBot) SendText(message string) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHomeBot_SendText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendText'
type MockHomeBot_SendText_Call struct {
	*mock.Call
}

// SendText is a helper method to define mock.On call
//   - message string
func (_e *MockHomeBot_Expecter) SendText(message interface{}) *MockHomeBot_SendText_Call {
	return &MockHomeBot_SendText_Call{Call: _e.mock.On("SendText", message)}
}

func (_c *MockHomeBot_SendText_Call) Run(run func(message string)) *MockHomeBot_SendText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHomeBot_SendText_Call) Return(_a0 error) *MockHomeBot_SendText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHomeBot_SendText_Call) RunAndReturn(run func(string) error) *MockHomeBot_SendText_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockHomeBot interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockHomeBot creates a new instance of MockHomeBot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockHomeBot(t mockConstructorTestingTNewMockHomeBot) *MockHomeBot {
	mock := &MockHomeBot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
